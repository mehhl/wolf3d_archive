[0;31mType:[0m            Mesh
[0;31mString form:[0m     <Mesh: b'Exported from Blender-3.3.1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\ <...> \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00' 64450 vertices>
[0;31mLength:[0m          64450
[0;31mFile:[0m            ~/venvs/dog-3.8.10/lib/python3.8/site-packages/stl/mesh.py
[0;31mDocstring:[0m       <no docstring>
[0;31mClass docstring:[0m
Mesh object with easy access to the vectors through v0, v1 and v2.
The normals, areas, min, max and units are calculated automatically.

:param numpy.array data: The data for this mesh
:param bool calculate_normals: Whether to calculate the normals
:param bool remove_empty_areas: Whether to remove triangles with 0 area
        (due to rounding errors for example)

:ivar str name: Name of the solid, only exists in ASCII files
:ivar numpy.array data: Data as :func:`BaseMesh.dtype`
:ivar numpy.array points: All points (Nx9)
:ivar numpy.array normals: Normals for this mesh, calculated automatically
    by default (Nx3)
:ivar numpy.array vectors: Vectors in the mesh (Nx3x3)
:ivar numpy.array attr: Attributes per vector (used by binary STL)
:ivar numpy.array x: Points on the X axis by vertex (Nx3)
:ivar numpy.array y: Points on the Y axis by vertex (Nx3)
:ivar numpy.array z: Points on the Z axis by vertex (Nx3)
:ivar numpy.array v0: Points in vector 0 (Nx3)
:ivar numpy.array v1: Points in vector 1 (Nx3)
:ivar numpy.array v2: Points in vector 2 (Nx3)

>>> data = numpy.zeros(10, dtype=BaseMesh.dtype)
>>> mesh = BaseMesh(data, remove_empty_areas=False)
>>> # Increment vector 0 item 0
>>> mesh.v0[0] += 1
>>> mesh.v1[0] += 2

>>> # Check item 0 (contains v0, v1 and v2)
>>> assert numpy.array_equal(
...     mesh[0],
...     numpy.array([1., 1., 1., 2., 2., 2., 0., 0., 0.]))
>>> assert numpy.array_equal(
... mesh.vectors[0],
... numpy.array([[1., 1., 1.],
...     [2., 2., 2.],
...     [0., 0., 0.]]))
>>> assert numpy.array_equal(
...     mesh.v0[0],
...     numpy.array([1., 1., 1.]))
>>> assert numpy.array_equal(
...     mesh.points[0],
...     numpy.array([1., 1., 1., 2., 2., 2., 0., 0., 0.]))
>>> assert numpy.array_equal(
...     mesh.data[0],
...     numpy.array((
...             [0., 0., 0.],
...             [[1., 1., 1.], [2., 2., 2.], [0., 0., 0.]],
...             [0]),
...         dtype=BaseMesh.dtype))
>>> assert numpy.array_equal(mesh.x[0], numpy.array([1., 2., 0.]))

>>> mesh[0] = 3
>>> assert numpy.array_equal(
...     mesh[0],
...     numpy.array([3., 3., 3., 3., 3., 3., 3., 3., 3.]))

>>> len(mesh) == len(list(mesh))
True
>>> (mesh.min_ < mesh.max_).all()
True
>>> mesh.update_normals()
>>> mesh.units.sum()
0.0
>>> mesh.v0[:] = mesh.v1[:] = mesh.v2[:] = 0
>>> mesh.points.sum()
0.0

>>> mesh.v0 = mesh.v1 = mesh.v2 = 0
>>> mesh.x = mesh.y = mesh.z = 0

>>> mesh.attr = 1
>>> (mesh.attr == 1).all()
True

>>> mesh.normals = 2
>>> (mesh.normals == 2).all()
True

>>> mesh.vectors = 3
>>> (mesh.vectors == 3).all()
True

>>> mesh.points = 4
>>> (mesh.points == 4).all()
True