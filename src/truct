Help on module struct:

NNAAMMEE
    struct

MMOODDUULLEE  RREEFFEERREENNCCEE
    https://docs.python.org/3.8/library/struct
    
    The following documentation is automatically generated from the Python
    source files.  It may be incomplete, incorrect or include features that
    are considered implementation detail and may vary between Python
    implementations.  When in doubt, consult the module reference at the
    location listed above.

DDEESSCCRRIIPPTTIIOONN
    Functions to convert between Python values and C structs.
    Python bytes objects are used to hold the data representing the C struct
    and also as format strings (explained below) to describe the layout of data
    in the C struct.
    
    The optional first format char indicates byte order, size and alignment:
      @: native order, size & alignment (default)
      =: native order, std. size & alignment
      <: little-endian, std. size & alignment
      >: big-endian, std. size & alignment
      !: same as >
    
    The remaining chars indicate types of args and must match exactly;
    these can be preceded by a decimal repeat count:
      x: pad byte (no data); c:char; b:signed byte; B:unsigned byte;
      ?: _Bool (requires C99; if not available, char is used instead)
      h:short; H:unsigned short; i:int; I:unsigned int;
      l:long; L:unsigned long; f:float; d:double; e:half-float.
    Special cases (preceding decimal count indicates length):
      s:string (array of char); p: pascal string (with count byte).
    Special cases (only available in native format):
      n:ssize_t; N:size_t;
      P:an integer type that is wide enough to hold a pointer.
    Special case (not in native mode unless 'long long' in platform C):
      q:long long; Q:unsigned long long
    Whitespace between formats is ignored.
    
    The variable struct.error is an exception raised on errors.

CCLLAASSSSEESS
    builtins.Exception(builtins.BaseException)
        error
    builtins.object
        builtins.Struct
    
    class SSttrruucctt(object)
     |  Struct(format)
     |  
     |  Create a compiled struct object.
     |  
     |  Return a new Struct object which writes and reads binary data according to
     |  the format string.
     |  
     |  See help(struct) for more on format strings.
     |  
     |  Methods defined here:
     |  
     |  ____ddeellaattttrr____(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  ____ggeettaattttrriibbuuttee____(self, name, /)
     |      Return getattr(self, name).
     |  
     |  ____iinniitt____(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ____sseettaattttrr____(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  ____ssiizzeeooff____(...)
     |      S.__sizeof__() -> size of S in memory, in bytes
     |  
     |  iitteerr__uunnppaacckk(self, buffer, /)
     |      Return an iterator yielding tuples.
     |      
     |      Tuples are unpacked from the given bytes source, like a repeated
     |      invocation of unpack_from().
     |      
     |      Requires that the bytes length be a multiple of the struct size.
     |  
     |  ppaacckk(...)
     |      S.pack(v1, v2, ...) -> bytes
     |      
     |      Return a bytes object containing values v1, v2, ... packed according
     |      to the format string S.format.  See help(struct) for more on format
     |      strings.
     |  
     |  ppaacckk__iinnttoo(...)
     |      S.pack_into(buffer, offset, v1, v2, ...)
     |      
     |      Pack the values v1, v2, ... according to the format string S.format
     |      and write the packed bytes into the writable buffer buf starting at
     |      offset.  Note that the offset is a required argument.  See
     |      help(struct) for more on format strings.
     |  
     |  uunnppaacckk(self, buffer, /)
     |      Return a tuple containing unpacked values.
     |      
     |      Unpack according to the format string Struct.format. The buffer's size
     |      in bytes must be Struct.size.
     |      
     |      See help(struct) for more on format strings.
     |  
     |  uunnppaacckk__ffrroomm(self, /, buffer, offset=0)
     |      Return a tuple containing unpacked values.
     |      
     |      Values are unpacked according to the format string Struct.format.
     |      
     |      The buffer's size in bytes, starting at position offset, must be
     |      at least Struct.size.
     |      
     |      See help(struct) for more on format strings.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  ____nneeww____(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ffoorrmmaatt
     |      struct format string
     |  
     |  ssiizzee
     |      struct size in bytes
    
    class eerrrroorr(builtins.Exception)
     |  Common base class for all non-exit exceptions.
     |  
     |  Method resolution order:
     |      error
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.Exception:
     |  
     |  ____iinniitt____(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.Exception:
     |  
     |  ____nneeww____(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |  
     |  ____ddeellaattttrr____(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  ____ggeettaattttrriibbuuttee____(self, name, /)
     |      Return getattr(self, name).
     |  
     |  ____rreedduuccee____(...)
     |      Helper for pickle.
     |  
     |  ____rreepprr____(self, /)
     |      Return repr(self).
     |  
     |  ____sseettaattttrr____(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  ____sseettssttaattee____(...)
     |  
     |  ____ssttrr____(self, /)
     |      Return str(self).
     |  
     |  wwiitthh__ttrraacceebbaacckk(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |  
     |  ____ccaauussee____
     |      exception cause
     |  
     |  ____ccoonntteexxtt____
     |      exception context
     |  
     |  ____ddiicctt____
     |  
     |  ____ssuupppprreessss__ccoonntteexxtt____
     |  
     |  ____ttrraacceebbaacckk____
     |  
     |  aarrggss

FFUUNNCCTTIIOONNSS
    ccaallccssiizzee(format, /)
        Return size in bytes of the struct described by the format string.
    
    iitteerr__uunnppaacckk(format, buffer, /)
        Return an iterator yielding tuples unpacked from the given bytes.
        
        The bytes are unpacked according to the format string, like
        a repeated invocation of unpack_from().
        
        Requires that the bytes length be a multiple of the format struct size.
    
    ppaacckk(...)
        pack(format, v1, v2, ...) -> bytes
        
        Return a bytes object containing the values v1, v2, ... packed according
        to the format string.  See help(struct) for more on format strings.
    
    ppaacckk__iinnttoo(...)
        pack_into(format, buffer, offset, v1, v2, ...)
        
        Pack the values v1, v2, ... according to the format string and write
        the packed bytes into the writable buffer buf starting at offset.  Note
        that the offset is a required argument.  See help(struct) for more
        on format strings.
    
    uunnppaacckk(format, buffer, /)
        Return a tuple containing values unpacked according to the format string.
        
        The buffer's size in bytes must be calcsize(format).
        
        See help(struct) for more on format strings.
    
    uunnppaacckk__ffrroomm(format, /, buffer, offset=0)
        Return a tuple containing values unpacked according to the format string.
        
        The buffer's size, minus offset, must be at least calcsize(format).
        
        See help(struct) for more on format strings.

DDAATTAA
    ____aallll____ = ['calcsize', 'pack', 'pack_into', 'unpack', 'unpack_from', '...

FFIILLEE
    /usr/lib/python3.8/struct.py

